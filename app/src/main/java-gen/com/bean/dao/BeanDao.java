package com.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.bean.entity.Bean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEAN".
*/
public class BeanDao extends AbstractDao<Bean, Long> {

    public static final String TABLENAME = "BEAN";

    /**
     * Properties of entity Bean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Data1 = new Property(2, String.class, "data1", false, "DATA1");
        public final static Property Data2 = new Property(3, String.class, "data2", false, "DATA2");
        public final static Property Data3 = new Property(4, String.class, "data3", false, "DATA3");
        public final static Property TimeDetail = new Property(5, String.class, "timeDetail", false, "TIME_DETAIL");
        public final static Property Now = new Property(6, java.util.Date.class, "now", false, "NOW");
    };


    public BeanDao(DaoConfig config) {
        super(config);
    }
    
    public BeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DATA1\" TEXT," + // 2: data1
                "\"DATA2\" TEXT," + // 3: data2
                "\"DATA3\" TEXT," + // 4: data3
                "\"TIME_DETAIL\" TEXT," + // 5: timeDetail
                "\"NOW\" INTEGER);"); // 6: now
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(3, data1);
        }
 
        String data2 = entity.getData2();
        if (data2 != null) {
            stmt.bindString(4, data2);
        }
 
        String data3 = entity.getData3();
        if (data3 != null) {
            stmt.bindString(5, data3);
        }
 
        String timeDetail = entity.getTimeDetail();
        if (timeDetail != null) {
            stmt.bindString(6, timeDetail);
        }
 
        java.util.Date now = entity.getNow();
        if (now != null) {
            stmt.bindLong(7, now.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bean readEntity(Cursor cursor, int offset) {
        Bean entity = new Bean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // data1
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // data2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // data3
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // timeDetail
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // now
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setData1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setData2(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setData3(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimeDetail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNow(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
